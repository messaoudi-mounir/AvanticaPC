/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package Petrolink.PetroVaultHD.Model.Common;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Link extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Link\",\"namespace\":\"Petrolink.PetroVaultHD.Model.Common\",\"fields\":[{\"name\":\"rel\",\"type\":\"string\"},{\"name\":\"href\",\"type\":\"string\"}],\"fullName\":\"Petrolink.PetroVaultHD.Model.Common.Link\",\"depends\":[]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.CharSequence rel;
  @Deprecated public java.lang.CharSequence href;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public Link() {}

  /**
   * All-args constructor.
   */
  public Link(java.lang.CharSequence rel, java.lang.CharSequence href) {
    this.rel = rel;
    this.href = href;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return rel;
    case 1: return href;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: rel = (java.lang.CharSequence)value$; break;
    case 1: href = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'rel' field.
   */
  public java.lang.CharSequence getRel() {
    return rel;
  }

  /**
   * Sets the value of the 'rel' field.
   * @param value the value to set.
   */
  public void setRel(java.lang.CharSequence value) {
    this.rel = value;
  }

  /**
   * Gets the value of the 'href' field.
   */
  public java.lang.CharSequence getHref() {
    return href;
  }

  /**
   * Sets the value of the 'href' field.
   * @param value the value to set.
   */
  public void setHref(java.lang.CharSequence value) {
    this.href = value;
  }

  /** Creates a new Link RecordBuilder */
  public static Petrolink.PetroVaultHD.Model.Common.Link.Builder newBuilder() {
    return new Petrolink.PetroVaultHD.Model.Common.Link.Builder();
  }
  
  /** Creates a new Link RecordBuilder by copying an existing Builder */
  public static Petrolink.PetroVaultHD.Model.Common.Link.Builder newBuilder(Petrolink.PetroVaultHD.Model.Common.Link.Builder other) {
    return new Petrolink.PetroVaultHD.Model.Common.Link.Builder(other);
  }
  
  /** Creates a new Link RecordBuilder by copying an existing Link instance */
  public static Petrolink.PetroVaultHD.Model.Common.Link.Builder newBuilder(Petrolink.PetroVaultHD.Model.Common.Link other) {
    return new Petrolink.PetroVaultHD.Model.Common.Link.Builder(other);
  }
  
  /**
   * RecordBuilder for Link instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Link>
    implements org.apache.avro.data.RecordBuilder<Link> {

    private java.lang.CharSequence rel;
    private java.lang.CharSequence href;

    /** Creates a new Builder */
    private Builder() {
      super(Petrolink.PetroVaultHD.Model.Common.Link.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(Petrolink.PetroVaultHD.Model.Common.Link.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.rel)) {
        this.rel = data().deepCopy(fields()[0].schema(), other.rel);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.href)) {
        this.href = data().deepCopy(fields()[1].schema(), other.href);
        fieldSetFlags()[1] = true;
      }
    }
    
    /** Creates a Builder by copying an existing Link instance */
    private Builder(Petrolink.PetroVaultHD.Model.Common.Link other) {
            super(Petrolink.PetroVaultHD.Model.Common.Link.SCHEMA$);
      if (isValidValue(fields()[0], other.rel)) {
        this.rel = data().deepCopy(fields()[0].schema(), other.rel);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.href)) {
        this.href = data().deepCopy(fields()[1].schema(), other.href);
        fieldSetFlags()[1] = true;
      }
    }

    /** Gets the value of the 'rel' field */
    public java.lang.CharSequence getRel() {
      return rel;
    }
    
    /** Sets the value of the 'rel' field */
    public Petrolink.PetroVaultHD.Model.Common.Link.Builder setRel(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.rel = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'rel' field has been set */
    public boolean hasRel() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'rel' field */
    public Petrolink.PetroVaultHD.Model.Common.Link.Builder clearRel() {
      rel = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'href' field */
    public java.lang.CharSequence getHref() {
      return href;
    }
    
    /** Sets the value of the 'href' field */
    public Petrolink.PetroVaultHD.Model.Common.Link.Builder setHref(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.href = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'href' field has been set */
    public boolean hasHref() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'href' field */
    public Petrolink.PetroVaultHD.Model.Common.Link.Builder clearHref() {
      href = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    public Link build() {
      try {
        Link record = new Link();
        record.rel = fieldSetFlags()[0] ? this.rel : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.href = fieldSetFlags()[1] ? this.href : (java.lang.CharSequence) defaultValue(fields()[1]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
