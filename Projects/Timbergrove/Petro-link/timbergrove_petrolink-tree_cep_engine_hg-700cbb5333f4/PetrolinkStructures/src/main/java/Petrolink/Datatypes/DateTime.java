/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package Petrolink.Datatypes;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class DateTime extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"DateTime\",\"namespace\":\"Petrolink.Datatypes\",\"fields\":[{\"name\":\"time\",\"type\":\"long\"},{\"name\":\"offset\",\"type\":\"double\"}],\"fullName\":\"Petrolink.Datatypes.DateTime\",\"depends\":[]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public long time;
  @Deprecated public double offset;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public DateTime() {}

  /**
   * All-args constructor.
   */
  public DateTime(java.lang.Long time, java.lang.Double offset) {
    this.time = time;
    this.offset = offset;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return time;
    case 1: return offset;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: time = (java.lang.Long)value$; break;
    case 1: offset = (java.lang.Double)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'time' field.
   */
  public java.lang.Long getTime() {
    return time;
  }

  /**
   * Sets the value of the 'time' field.
   * @param value the value to set.
   */
  public void setTime(java.lang.Long value) {
    this.time = value;
  }

  /**
   * Gets the value of the 'offset' field.
   */
  public java.lang.Double getOffset() {
    return offset;
  }

  /**
   * Sets the value of the 'offset' field.
   * @param value the value to set.
   */
  public void setOffset(java.lang.Double value) {
    this.offset = value;
  }

  /** Creates a new DateTime RecordBuilder */
  public static Petrolink.Datatypes.DateTime.Builder newBuilder() {
    return new Petrolink.Datatypes.DateTime.Builder();
  }
  
  /** Creates a new DateTime RecordBuilder by copying an existing Builder */
  public static Petrolink.Datatypes.DateTime.Builder newBuilder(Petrolink.Datatypes.DateTime.Builder other) {
    return new Petrolink.Datatypes.DateTime.Builder(other);
  }
  
  /** Creates a new DateTime RecordBuilder by copying an existing DateTime instance */
  public static Petrolink.Datatypes.DateTime.Builder newBuilder(Petrolink.Datatypes.DateTime other) {
    return new Petrolink.Datatypes.DateTime.Builder(other);
  }
  
  /**
   * RecordBuilder for DateTime instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<DateTime>
    implements org.apache.avro.data.RecordBuilder<DateTime> {

    private long time;
    private double offset;

    /** Creates a new Builder */
    private Builder() {
      super(Petrolink.Datatypes.DateTime.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(Petrolink.Datatypes.DateTime.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.time)) {
        this.time = data().deepCopy(fields()[0].schema(), other.time);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.offset)) {
        this.offset = data().deepCopy(fields()[1].schema(), other.offset);
        fieldSetFlags()[1] = true;
      }
    }
    
    /** Creates a Builder by copying an existing DateTime instance */
    private Builder(Petrolink.Datatypes.DateTime other) {
            super(Petrolink.Datatypes.DateTime.SCHEMA$);
      if (isValidValue(fields()[0], other.time)) {
        this.time = data().deepCopy(fields()[0].schema(), other.time);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.offset)) {
        this.offset = data().deepCopy(fields()[1].schema(), other.offset);
        fieldSetFlags()[1] = true;
      }
    }

    /** Gets the value of the 'time' field */
    public java.lang.Long getTime() {
      return time;
    }
    
    /** Sets the value of the 'time' field */
    public Petrolink.Datatypes.DateTime.Builder setTime(long value) {
      validate(fields()[0], value);
      this.time = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'time' field has been set */
    public boolean hasTime() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'time' field */
    public Petrolink.Datatypes.DateTime.Builder clearTime() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'offset' field */
    public java.lang.Double getOffset() {
      return offset;
    }
    
    /** Sets the value of the 'offset' field */
    public Petrolink.Datatypes.DateTime.Builder setOffset(double value) {
      validate(fields()[1], value);
      this.offset = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'offset' field has been set */
    public boolean hasOffset() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'offset' field */
    public Petrolink.Datatypes.DateTime.Builder clearOffset() {
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    public DateTime build() {
      try {
        DateTime record = new DateTime();
        record.time = fieldSetFlags()[0] ? this.time : (java.lang.Long) defaultValue(fields()[0]);
        record.offset = fieldSetFlags()[1] ? this.offset : (java.lang.Double) defaultValue(fields()[1]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
