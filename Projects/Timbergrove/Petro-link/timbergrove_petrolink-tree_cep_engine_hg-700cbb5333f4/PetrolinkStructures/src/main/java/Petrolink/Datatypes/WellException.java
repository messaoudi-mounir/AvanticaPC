/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package Petrolink.Datatypes;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class WellException extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"WellException\",\"namespace\":\"Petrolink.Datatypes\",\"fields\":[{\"name\":\"uri\",\"type\":\"string\"},{\"name\":\"well\",\"type\":\"string\"},{\"name\":\"classification\",\"type\":\"string\"},{\"name\":\"severity\",\"type\":{\"type\":\"enum\",\"name\":\"WellExceptionSeverity\",\"symbols\":[\"High\",\"Medium\",\"Low\"],\"fullName\":\"Petrolink.Datatypes.WellExceptionSeverity\",\"depends\":[]}},{\"name\":\"message\",\"type\":\"string\"},{\"name\":\"timeStamp\",\"type\":{\"type\":\"record\",\"name\":\"DateTime\",\"fields\":[{\"name\":\"time\",\"type\":\"long\"},{\"name\":\"offset\",\"type\":\"double\"}],\"fullName\":\"Petrolink.Datatypes.DateTime\",\"depends\":[]}},{\"name\":\"observedMnemonic\",\"type\":\"string\"},{\"name\":\"activity\",\"type\":\"int\"},{\"name\":\"deadband\",\"type\":\"double\"},{\"name\":\"threshold\",\"type\":\"string\"},{\"name\":\"rule\",\"type\":\"string\"}],\"fullName\":\"Petrolink.Datatypes.WellException\",\"depends\":[\"Petrolink.Datatypes.WellExceptionSeverity\",\"Petrolink.Datatypes.DateTime\"]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.CharSequence uri;
  @Deprecated public java.lang.CharSequence well;
  @Deprecated public java.lang.CharSequence classification;
  @Deprecated public Petrolink.Datatypes.WellExceptionSeverity severity;
  @Deprecated public java.lang.CharSequence message;
  @Deprecated public Petrolink.Datatypes.DateTime timeStamp;
  @Deprecated public java.lang.CharSequence observedMnemonic;
  @Deprecated public int activity;
  @Deprecated public double deadband;
  @Deprecated public java.lang.CharSequence threshold;
  @Deprecated public java.lang.CharSequence rule;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public WellException() {}

  /**
   * All-args constructor.
   */
  public WellException(java.lang.CharSequence uri, java.lang.CharSequence well, java.lang.CharSequence classification, Petrolink.Datatypes.WellExceptionSeverity severity, java.lang.CharSequence message, Petrolink.Datatypes.DateTime timeStamp, java.lang.CharSequence observedMnemonic, java.lang.Integer activity, java.lang.Double deadband, java.lang.CharSequence threshold, java.lang.CharSequence rule) {
    this.uri = uri;
    this.well = well;
    this.classification = classification;
    this.severity = severity;
    this.message = message;
    this.timeStamp = timeStamp;
    this.observedMnemonic = observedMnemonic;
    this.activity = activity;
    this.deadband = deadband;
    this.threshold = threshold;
    this.rule = rule;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return uri;
    case 1: return well;
    case 2: return classification;
    case 3: return severity;
    case 4: return message;
    case 5: return timeStamp;
    case 6: return observedMnemonic;
    case 7: return activity;
    case 8: return deadband;
    case 9: return threshold;
    case 10: return rule;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: uri = (java.lang.CharSequence)value$; break;
    case 1: well = (java.lang.CharSequence)value$; break;
    case 2: classification = (java.lang.CharSequence)value$; break;
    case 3: severity = (Petrolink.Datatypes.WellExceptionSeverity)value$; break;
    case 4: message = (java.lang.CharSequence)value$; break;
    case 5: timeStamp = (Petrolink.Datatypes.DateTime)value$; break;
    case 6: observedMnemonic = (java.lang.CharSequence)value$; break;
    case 7: activity = (java.lang.Integer)value$; break;
    case 8: deadband = (java.lang.Double)value$; break;
    case 9: threshold = (java.lang.CharSequence)value$; break;
    case 10: rule = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'uri' field.
   */
  public java.lang.CharSequence getUri() {
    return uri;
  }

  /**
   * Sets the value of the 'uri' field.
   * @param value the value to set.
   */
  public void setUri(java.lang.CharSequence value) {
    this.uri = value;
  }

  /**
   * Gets the value of the 'well' field.
   */
  public java.lang.CharSequence getWell() {
    return well;
  }

  /**
   * Sets the value of the 'well' field.
   * @param value the value to set.
   */
  public void setWell(java.lang.CharSequence value) {
    this.well = value;
  }

  /**
   * Gets the value of the 'classification' field.
   */
  public java.lang.CharSequence getClassification() {
    return classification;
  }

  /**
   * Sets the value of the 'classification' field.
   * @param value the value to set.
   */
  public void setClassification(java.lang.CharSequence value) {
    this.classification = value;
  }

  /**
   * Gets the value of the 'severity' field.
   */
  public Petrolink.Datatypes.WellExceptionSeverity getSeverity() {
    return severity;
  }

  /**
   * Sets the value of the 'severity' field.
   * @param value the value to set.
   */
  public void setSeverity(Petrolink.Datatypes.WellExceptionSeverity value) {
    this.severity = value;
  }

  /**
   * Gets the value of the 'message' field.
   */
  public java.lang.CharSequence getMessage() {
    return message;
  }

  /**
   * Sets the value of the 'message' field.
   * @param value the value to set.
   */
  public void setMessage(java.lang.CharSequence value) {
    this.message = value;
  }

  /**
   * Gets the value of the 'timeStamp' field.
   */
  public Petrolink.Datatypes.DateTime getTimeStamp() {
    return timeStamp;
  }

  /**
   * Sets the value of the 'timeStamp' field.
   * @param value the value to set.
   */
  public void setTimeStamp(Petrolink.Datatypes.DateTime value) {
    this.timeStamp = value;
  }

  /**
   * Gets the value of the 'observedMnemonic' field.
   */
  public java.lang.CharSequence getObservedMnemonic() {
    return observedMnemonic;
  }

  /**
   * Sets the value of the 'observedMnemonic' field.
   * @param value the value to set.
   */
  public void setObservedMnemonic(java.lang.CharSequence value) {
    this.observedMnemonic = value;
  }

  /**
   * Gets the value of the 'activity' field.
   */
  public java.lang.Integer getActivity() {
    return activity;
  }

  /**
   * Sets the value of the 'activity' field.
   * @param value the value to set.
   */
  public void setActivity(java.lang.Integer value) {
    this.activity = value;
  }

  /**
   * Gets the value of the 'deadband' field.
   */
  public java.lang.Double getDeadband() {
    return deadband;
  }

  /**
   * Sets the value of the 'deadband' field.
   * @param value the value to set.
   */
  public void setDeadband(java.lang.Double value) {
    this.deadband = value;
  }

  /**
   * Gets the value of the 'threshold' field.
   */
  public java.lang.CharSequence getThreshold() {
    return threshold;
  }

  /**
   * Sets the value of the 'threshold' field.
   * @param value the value to set.
   */
  public void setThreshold(java.lang.CharSequence value) {
    this.threshold = value;
  }

  /**
   * Gets the value of the 'rule' field.
   */
  public java.lang.CharSequence getRule() {
    return rule;
  }

  /**
   * Sets the value of the 'rule' field.
   * @param value the value to set.
   */
  public void setRule(java.lang.CharSequence value) {
    this.rule = value;
  }

  /** Creates a new WellException RecordBuilder */
  public static Petrolink.Datatypes.WellException.Builder newBuilder() {
    return new Petrolink.Datatypes.WellException.Builder();
  }
  
  /** Creates a new WellException RecordBuilder by copying an existing Builder */
  public static Petrolink.Datatypes.WellException.Builder newBuilder(Petrolink.Datatypes.WellException.Builder other) {
    return new Petrolink.Datatypes.WellException.Builder(other);
  }
  
  /** Creates a new WellException RecordBuilder by copying an existing WellException instance */
  public static Petrolink.Datatypes.WellException.Builder newBuilder(Petrolink.Datatypes.WellException other) {
    return new Petrolink.Datatypes.WellException.Builder(other);
  }
  
  /**
   * RecordBuilder for WellException instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<WellException>
    implements org.apache.avro.data.RecordBuilder<WellException> {

    private java.lang.CharSequence uri;
    private java.lang.CharSequence well;
    private java.lang.CharSequence classification;
    private Petrolink.Datatypes.WellExceptionSeverity severity;
    private java.lang.CharSequence message;
    private Petrolink.Datatypes.DateTime timeStamp;
    private java.lang.CharSequence observedMnemonic;
    private int activity;
    private double deadband;
    private java.lang.CharSequence threshold;
    private java.lang.CharSequence rule;

    /** Creates a new Builder */
    private Builder() {
      super(Petrolink.Datatypes.WellException.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(Petrolink.Datatypes.WellException.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.uri)) {
        this.uri = data().deepCopy(fields()[0].schema(), other.uri);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.well)) {
        this.well = data().deepCopy(fields()[1].schema(), other.well);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.classification)) {
        this.classification = data().deepCopy(fields()[2].schema(), other.classification);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.severity)) {
        this.severity = data().deepCopy(fields()[3].schema(), other.severity);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.message)) {
        this.message = data().deepCopy(fields()[4].schema(), other.message);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.timeStamp)) {
        this.timeStamp = data().deepCopy(fields()[5].schema(), other.timeStamp);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.observedMnemonic)) {
        this.observedMnemonic = data().deepCopy(fields()[6].schema(), other.observedMnemonic);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.activity)) {
        this.activity = data().deepCopy(fields()[7].schema(), other.activity);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.deadband)) {
        this.deadband = data().deepCopy(fields()[8].schema(), other.deadband);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.threshold)) {
        this.threshold = data().deepCopy(fields()[9].schema(), other.threshold);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.rule)) {
        this.rule = data().deepCopy(fields()[10].schema(), other.rule);
        fieldSetFlags()[10] = true;
      }
    }
    
    /** Creates a Builder by copying an existing WellException instance */
    private Builder(Petrolink.Datatypes.WellException other) {
            super(Petrolink.Datatypes.WellException.SCHEMA$);
      if (isValidValue(fields()[0], other.uri)) {
        this.uri = data().deepCopy(fields()[0].schema(), other.uri);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.well)) {
        this.well = data().deepCopy(fields()[1].schema(), other.well);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.classification)) {
        this.classification = data().deepCopy(fields()[2].schema(), other.classification);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.severity)) {
        this.severity = data().deepCopy(fields()[3].schema(), other.severity);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.message)) {
        this.message = data().deepCopy(fields()[4].schema(), other.message);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.timeStamp)) {
        this.timeStamp = data().deepCopy(fields()[5].schema(), other.timeStamp);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.observedMnemonic)) {
        this.observedMnemonic = data().deepCopy(fields()[6].schema(), other.observedMnemonic);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.activity)) {
        this.activity = data().deepCopy(fields()[7].schema(), other.activity);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.deadband)) {
        this.deadband = data().deepCopy(fields()[8].schema(), other.deadband);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.threshold)) {
        this.threshold = data().deepCopy(fields()[9].schema(), other.threshold);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.rule)) {
        this.rule = data().deepCopy(fields()[10].schema(), other.rule);
        fieldSetFlags()[10] = true;
      }
    }

    /** Gets the value of the 'uri' field */
    public java.lang.CharSequence getUri() {
      return uri;
    }
    
    /** Sets the value of the 'uri' field */
    public Petrolink.Datatypes.WellException.Builder setUri(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.uri = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'uri' field has been set */
    public boolean hasUri() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'uri' field */
    public Petrolink.Datatypes.WellException.Builder clearUri() {
      uri = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'well' field */
    public java.lang.CharSequence getWell() {
      return well;
    }
    
    /** Sets the value of the 'well' field */
    public Petrolink.Datatypes.WellException.Builder setWell(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.well = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'well' field has been set */
    public boolean hasWell() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'well' field */
    public Petrolink.Datatypes.WellException.Builder clearWell() {
      well = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'classification' field */
    public java.lang.CharSequence getClassification() {
      return classification;
    }
    
    /** Sets the value of the 'classification' field */
    public Petrolink.Datatypes.WellException.Builder setClassification(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.classification = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'classification' field has been set */
    public boolean hasClassification() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'classification' field */
    public Petrolink.Datatypes.WellException.Builder clearClassification() {
      classification = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'severity' field */
    public Petrolink.Datatypes.WellExceptionSeverity getSeverity() {
      return severity;
    }
    
    /** Sets the value of the 'severity' field */
    public Petrolink.Datatypes.WellException.Builder setSeverity(Petrolink.Datatypes.WellExceptionSeverity value) {
      validate(fields()[3], value);
      this.severity = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'severity' field has been set */
    public boolean hasSeverity() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'severity' field */
    public Petrolink.Datatypes.WellException.Builder clearSeverity() {
      severity = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'message' field */
    public java.lang.CharSequence getMessage() {
      return message;
    }
    
    /** Sets the value of the 'message' field */
    public Petrolink.Datatypes.WellException.Builder setMessage(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.message = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'message' field has been set */
    public boolean hasMessage() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'message' field */
    public Petrolink.Datatypes.WellException.Builder clearMessage() {
      message = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /** Gets the value of the 'timeStamp' field */
    public Petrolink.Datatypes.DateTime getTimeStamp() {
      return timeStamp;
    }
    
    /** Sets the value of the 'timeStamp' field */
    public Petrolink.Datatypes.WellException.Builder setTimeStamp(Petrolink.Datatypes.DateTime value) {
      validate(fields()[5], value);
      this.timeStamp = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'timeStamp' field has been set */
    public boolean hasTimeStamp() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'timeStamp' field */
    public Petrolink.Datatypes.WellException.Builder clearTimeStamp() {
      timeStamp = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /** Gets the value of the 'observedMnemonic' field */
    public java.lang.CharSequence getObservedMnemonic() {
      return observedMnemonic;
    }
    
    /** Sets the value of the 'observedMnemonic' field */
    public Petrolink.Datatypes.WellException.Builder setObservedMnemonic(java.lang.CharSequence value) {
      validate(fields()[6], value);
      this.observedMnemonic = value;
      fieldSetFlags()[6] = true;
      return this; 
    }
    
    /** Checks whether the 'observedMnemonic' field has been set */
    public boolean hasObservedMnemonic() {
      return fieldSetFlags()[6];
    }
    
    /** Clears the value of the 'observedMnemonic' field */
    public Petrolink.Datatypes.WellException.Builder clearObservedMnemonic() {
      observedMnemonic = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /** Gets the value of the 'activity' field */
    public java.lang.Integer getActivity() {
      return activity;
    }
    
    /** Sets the value of the 'activity' field */
    public Petrolink.Datatypes.WellException.Builder setActivity(int value) {
      validate(fields()[7], value);
      this.activity = value;
      fieldSetFlags()[7] = true;
      return this; 
    }
    
    /** Checks whether the 'activity' field has been set */
    public boolean hasActivity() {
      return fieldSetFlags()[7];
    }
    
    /** Clears the value of the 'activity' field */
    public Petrolink.Datatypes.WellException.Builder clearActivity() {
      fieldSetFlags()[7] = false;
      return this;
    }

    /** Gets the value of the 'deadband' field */
    public java.lang.Double getDeadband() {
      return deadband;
    }
    
    /** Sets the value of the 'deadband' field */
    public Petrolink.Datatypes.WellException.Builder setDeadband(double value) {
      validate(fields()[8], value);
      this.deadband = value;
      fieldSetFlags()[8] = true;
      return this; 
    }
    
    /** Checks whether the 'deadband' field has been set */
    public boolean hasDeadband() {
      return fieldSetFlags()[8];
    }
    
    /** Clears the value of the 'deadband' field */
    public Petrolink.Datatypes.WellException.Builder clearDeadband() {
      fieldSetFlags()[8] = false;
      return this;
    }

    /** Gets the value of the 'threshold' field */
    public java.lang.CharSequence getThreshold() {
      return threshold;
    }
    
    /** Sets the value of the 'threshold' field */
    public Petrolink.Datatypes.WellException.Builder setThreshold(java.lang.CharSequence value) {
      validate(fields()[9], value);
      this.threshold = value;
      fieldSetFlags()[9] = true;
      return this; 
    }
    
    /** Checks whether the 'threshold' field has been set */
    public boolean hasThreshold() {
      return fieldSetFlags()[9];
    }
    
    /** Clears the value of the 'threshold' field */
    public Petrolink.Datatypes.WellException.Builder clearThreshold() {
      threshold = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /** Gets the value of the 'rule' field */
    public java.lang.CharSequence getRule() {
      return rule;
    }
    
    /** Sets the value of the 'rule' field */
    public Petrolink.Datatypes.WellException.Builder setRule(java.lang.CharSequence value) {
      validate(fields()[10], value);
      this.rule = value;
      fieldSetFlags()[10] = true;
      return this; 
    }
    
    /** Checks whether the 'rule' field has been set */
    public boolean hasRule() {
      return fieldSetFlags()[10];
    }
    
    /** Clears the value of the 'rule' field */
    public Petrolink.Datatypes.WellException.Builder clearRule() {
      rule = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    @Override
    public WellException build() {
      try {
        WellException record = new WellException();
        record.uri = fieldSetFlags()[0] ? this.uri : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.well = fieldSetFlags()[1] ? this.well : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.classification = fieldSetFlags()[2] ? this.classification : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.severity = fieldSetFlags()[3] ? this.severity : (Petrolink.Datatypes.WellExceptionSeverity) defaultValue(fields()[3]);
        record.message = fieldSetFlags()[4] ? this.message : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.timeStamp = fieldSetFlags()[5] ? this.timeStamp : (Petrolink.Datatypes.DateTime) defaultValue(fields()[5]);
        record.observedMnemonic = fieldSetFlags()[6] ? this.observedMnemonic : (java.lang.CharSequence) defaultValue(fields()[6]);
        record.activity = fieldSetFlags()[7] ? this.activity : (java.lang.Integer) defaultValue(fields()[7]);
        record.deadband = fieldSetFlags()[8] ? this.deadband : (java.lang.Double) defaultValue(fields()[8]);
        record.threshold = fieldSetFlags()[9] ? this.threshold : (java.lang.CharSequence) defaultValue(fields()[9]);
        record.rule = fieldSetFlags()[10] ? this.rule : (java.lang.CharSequence) defaultValue(fields()[10]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
