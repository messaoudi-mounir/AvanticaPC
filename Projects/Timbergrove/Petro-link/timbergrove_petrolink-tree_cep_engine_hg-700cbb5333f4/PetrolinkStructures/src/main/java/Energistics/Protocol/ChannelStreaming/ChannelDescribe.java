/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package Energistics.Protocol.ChannelStreaming;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class ChannelDescribe extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ChannelDescribe\",\"namespace\":\"Energistics.Protocol.ChannelStreaming\",\"fields\":[{\"name\":\"uris\",\"type\":{\"type\":\"array\",\"items\":\"string\"}}],\"messageType\":\"1\",\"protocol\":\"1\",\"senderRole\":\"consumer\",\"protocolRoles\":\"producer,consumer\",\"fullName\":\"Energistics.Protocol.ChannelStreaming.ChannelDescribe\",\"depends\":[]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.util.List<java.lang.CharSequence> uris;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public ChannelDescribe() {}

  /**
   * All-args constructor.
   */
  public ChannelDescribe(java.util.List<java.lang.CharSequence> uris) {
    this.uris = uris;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return uris;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: uris = (java.util.List<java.lang.CharSequence>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'uris' field.
   */
  public java.util.List<java.lang.CharSequence> getUris() {
    return uris;
  }

  /**
   * Sets the value of the 'uris' field.
   * @param value the value to set.
   */
  public void setUris(java.util.List<java.lang.CharSequence> value) {
    this.uris = value;
  }

  /** Creates a new ChannelDescribe RecordBuilder */
  public static Energistics.Protocol.ChannelStreaming.ChannelDescribe.Builder newBuilder() {
    return new Energistics.Protocol.ChannelStreaming.ChannelDescribe.Builder();
  }
  
  /** Creates a new ChannelDescribe RecordBuilder by copying an existing Builder */
  public static Energistics.Protocol.ChannelStreaming.ChannelDescribe.Builder newBuilder(Energistics.Protocol.ChannelStreaming.ChannelDescribe.Builder other) {
    return new Energistics.Protocol.ChannelStreaming.ChannelDescribe.Builder(other);
  }
  
  /** Creates a new ChannelDescribe RecordBuilder by copying an existing ChannelDescribe instance */
  public static Energistics.Protocol.ChannelStreaming.ChannelDescribe.Builder newBuilder(Energistics.Protocol.ChannelStreaming.ChannelDescribe other) {
    return new Energistics.Protocol.ChannelStreaming.ChannelDescribe.Builder(other);
  }
  
  /**
   * RecordBuilder for ChannelDescribe instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ChannelDescribe>
    implements org.apache.avro.data.RecordBuilder<ChannelDescribe> {

    private java.util.List<java.lang.CharSequence> uris;

    /** Creates a new Builder */
    private Builder() {
      super(Energistics.Protocol.ChannelStreaming.ChannelDescribe.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(Energistics.Protocol.ChannelStreaming.ChannelDescribe.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.uris)) {
        this.uris = data().deepCopy(fields()[0].schema(), other.uris);
        fieldSetFlags()[0] = true;
      }
    }
    
    /** Creates a Builder by copying an existing ChannelDescribe instance */
    private Builder(Energistics.Protocol.ChannelStreaming.ChannelDescribe other) {
            super(Energistics.Protocol.ChannelStreaming.ChannelDescribe.SCHEMA$);
      if (isValidValue(fields()[0], other.uris)) {
        this.uris = data().deepCopy(fields()[0].schema(), other.uris);
        fieldSetFlags()[0] = true;
      }
    }

    /** Gets the value of the 'uris' field */
    public java.util.List<java.lang.CharSequence> getUris() {
      return uris;
    }
    
    /** Sets the value of the 'uris' field */
    public Energistics.Protocol.ChannelStreaming.ChannelDescribe.Builder setUris(java.util.List<java.lang.CharSequence> value) {
      validate(fields()[0], value);
      this.uris = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'uris' field has been set */
    public boolean hasUris() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'uris' field */
    public Energistics.Protocol.ChannelStreaming.ChannelDescribe.Builder clearUris() {
      uris = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    @Override
    public ChannelDescribe build() {
      try {
        ChannelDescribe record = new ChannelDescribe();
        record.uris = fieldSetFlags()[0] ? this.uris : (java.util.List<java.lang.CharSequence>) defaultValue(fields()[0]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
